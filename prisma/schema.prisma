// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  password          String
  name              String
  social_login_id   String?
  social_login_type String?
  role              Role     @default(USER)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  progress      UserCourseProgress[]
  debates       DebateSession[]
  forumPosts   Forum[]
  comments      ForumComment[]
  notifications Notification[]
  feedbacks     Feedback[]
  refreshToken  RefreshToken[]
}

model Resource {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  url         String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  level       CourseLevel
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  contents  CourseContent[]
  progress  UserCourseProgress[]
  feedbacks Feedback[]
}

model CourseContent {
  id          Int      @id @default(autoincrement())
  courseId   Int
  content_url String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id])
}

model UserCourseProgress {
  id            Int      @id @default(autoincrement())
  userId       Int
  courseId     Int
  progress      Float    @default(0)
  lastAccessed DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model DebateSession {
  id             Int      @id @default(autoincrement())
  userId        Int
  topic          String
  aiResponse    String
  userResponse  String
  feedback_score Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Forum {
  id        Int      @id @default(autoincrement())
  userId   Int
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User           @relation(fields: [userId], references: [id])
  comments ForumComment[]
}

model ForumComment {
  id        Int      @id @default(autoincrement())
  forumId  Int
  userId   Int
  comment   String
  parentId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  forum    Forum          @relation(fields: [forumId], references: [id])
  user     User           @relation(fields: [userId], references: [id])
  parent   ForumComment?  @relation("CommentParent", fields: [parentId], references: [id])
  children ForumComment[] @relation("CommentParent")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId   Int
  message   String
  type      NotificationType
  isRead   Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId   Int
  courseId Int
  feedback  String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int
  expiryDate DateTime

  user User @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum CourseLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum NotificationType {
  REMINDER
  FORUM
  COURSE
}
