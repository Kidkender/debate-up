// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  name String
  social_login_id String?
  role Role @default(USER)
  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  progress UserCoursePorgress[]
  debates DebateSession[]
  forum_posts Forum[]
  comments ForumComment[]
  notifications Notification[]
  feddbacks Feedback[]
}

model Resource {
  id Int @id @default(autoincrement())
  title String
  description String?
  url String
  category String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Course {
  id Int @id @default(autoincrement())
  title String
  description String?
  level CourseLevel
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  contents CourseContent[]
  progress UserCoursePorgress[]
  feedbacks Feedback[]
}

model CourseContent {
  id Int @id @default(autoincrement())
  course_id Int 
  content_url String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  course Course @relation(fields: [course_id], references: [id])
}

model UserCoursePorgress {
  id Int @id @default(autoincrement())
  user_id Int
  course_id Int
  progress Float @default(0)
  last_accessed DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  course Course @relation(fields: [course_id], references: [id])
}

model DebateSession {
  id Int @id @default(autoincrement())
  user_id Int
  topic String 
  ai_response String
  user_response String
  feedback_score Int?
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
}

model Forum {
  id Int @id @default(autoincrement())
  user_id Int
  title String
  content String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
  comments ForumComment[]
}

model ForumComment {
  id Int @id @default(autoincrement())
  forum_id Int
  user_id Int
  comment String
  created_at DateTime @default(now())

  forum Forum @relation(fields: [forum_id], references: [id])
  user User @relation(fields: [user_id], references: [id])
}

model Notification {
  id Int @id @default(autoincrement())
  user_id Int
  message String
  type NotificationType
  is_read Boolean @default(false)
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
}

model Feedback {
  id Int @id @default(autoincrement())
  user_id Int
  course_id Int
  feedback String
  rating Int
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  course Course @relation(fields: [course_id], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum CourseLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum NotificationType {
  REMINDER
  FORUM
  COURSE
}

