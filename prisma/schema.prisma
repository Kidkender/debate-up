// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:TxQOrLxvsxQlklAALUFdxesUmzBeBsKZ@autorack.proxy.rlwy.net:27233/railway"
  // url = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  password          String
  name              String
  social_login_id   String?
  social_login_type String?
  role              Role     @default(USER)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  emailVerified     Boolean @default(false)
  verificationCode  String?
  otpExpiry         DateTime?
  lastOtpSent       DateTime?

  progress      UserCourseProgress[]
  debates       DebateSession[]
  forumPosts   Forum[]
  comments      ForumComment[]
  notifications Notification[]
  feedbacks     Feedback[]
  refreshToken  RefreshToken[]
  reports Report[]
}

model Resource {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  url         String
  type        ResourceType
  categoryId Int 
  category Category @relation(fields: [categoryId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  description String?
  resources   Resource[]


  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  level       CourseLevel
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  quiz Quiz[]
  contents  CourseContent[]
  progress  UserCourseProgress[]
  feedbacks Feedback[]

  prerequisites PrerequisiteCourses[] @relation("CoursePrereq")
  dependentCourses PrerequisiteCourses[] @relation("CoursePrereqInverse")
}

model CourseContent {
  id          Int      @id @default(autoincrement())
  courseId   Int
  content_url String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id])
}

model UserCourseProgress {
  id            Int      @id @default(autoincrement())
  userId        Int
  courseId      Int
  progress      Float    @default(0)
  lastAccessed  DateTime @default(now())
  completedAt   DateTime?
  isCompleted   Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}


model DebateSession {
  id             Int      @id @default(autoincrement())
  userId        Int
  topic          String
  aiResponse    String
  userResponse  String
  feedback_score Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Forum {
  id        Int      @id @default(autoincrement())
  userId   Int
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User           @relation(fields: [userId], references: [id])
  comments ForumComment[]
}

model ForumComment {
  id        Int      @id @default(autoincrement())
  forumId  Int
  userId   Int
  comment   String
  parentId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  forum    Forum          @relation(fields: [forumId], references: [id])
  user     User           @relation(fields: [userId], references: [id])
  parent   ForumComment?  @relation("CommentParent", fields: [parentId], references: [id])
  children ForumComment[] @relation("CommentParent")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId   Int
  message   String
  type      NotificationType
  isRead   Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId   Int
  courseId Int
  feedback  String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int
  expiryDate DateTime

  user User @relation(fields: [userId], references: [id])
}

model Quiz {
  id        Int         @id @default(autoincrement())
  courseId  Int
  title     String
  questions QuizQuestion[]

  course Course @relation(fields: [courseId], references: [id])
}

model QuizQuestion {
  id       Int    @id @default(autoincrement())
  quizId   Int
  question String
  options  String
  answer   String

  quiz Quiz @relation(fields: [quizId], references: [id])
}

model PrerequisiteCourses {
  id         Int     @id @default(autoincrement())
  courseId   Int
  prereqId   Int

  course     Course  @relation("CoursePrereq", fields: [courseId], references: [id])
  prereq     Course  @relation("CoursePrereqInverse", fields: [prereqId], references: [id])
}

model Report {
  id          Int       @id @default(autoincrement())
  userId      Int
  contentId   Int
  contentType String
  reason      String
  createdAt   DateTime  @default(now())

  User        User      @relation(fields: [userId], references: [id])
}



enum Role {
  USER
  ADMIN
}

enum CourseLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum NotificationType {
  REMINDER
  FORUM
  COURSE
}

enum ResourceType {
  VIDEO
  ARTICLE
  BOOK
}